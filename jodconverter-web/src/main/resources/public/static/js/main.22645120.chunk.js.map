{"version":3,"sources":["api/req.js","api/api.js","redux/action-types.js","Path.js","redux/actions.js","components/Navbar.js","components/Body.js","components/FileDirectory.js","config.js","components/File.js","components/FileList.js","App.js","reportWebVitals.js","redux/reducers.js","redux/store.js","index.js"],"names":["headers","Headers","append","request","url","a","init","fetch","json","getFileList","path","body","action","method","JSON","stringify","mode","GET_FILE_LIST","OPEN_FOLDER","BACK","Path","this","node","prototype","join","replace","push","back","pop","toString","length","str","forEach","item","fromString","s","split","sElement","index","lastIndexOf","substr","result","fileTree","files","j","i","name","type","title","key","children","data","openFolder","folder","getFileListAsync","dispatch","req","props","authorization","onChange","info","file","status","console","log","fileList","message","success","error","Navbar","state","showModal","handleBack","backAsync","handleUpload","setState","handleCancel","className","primary","onClick","visible","onCancel","footer","icon","UploadOutlined","Component","connect","p","Body","left","right","FileDirectory","handleSelect","e","treeData","onSelect","React","apiUrl","logoList","FileOutlined","dir","FolderOpenOutlined","gif","FileGifOutlined","jpg","FileJpgOutlined","png","jpeg","md","FileMarkdownOutlined","ppt","FilePptOutlined","pptx","txt","FileTextOutlined","pdf","FilePdfOutlined","xls","FileExcelOutlined","xlsx","zip","FileZipOutlined","rar","doc","FileWordOutlined","docx","unknown","FileUnknownOutlined","Logo","hasOwnProperty","File","handleClick","window","open","onDoubleClick","FileList","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","combineReducers","Explorer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22645120.chunk.js","sourcesContent":["let headers = new Headers()\r\nheaders.append('content-type', 'application/json')\r\n/**\r\n * post请求构造\r\n * @param body\r\n * @returns {Object}\r\n */\r\nexport const postInit = body => ({\r\n  method: 'POST',\r\n  body: JSON.stringify(body),\r\n  headers,\r\n  mode: 'cors'\r\n})\r\n\r\n/**\r\n * get请求构造\r\n * @returns {{mode: string, headers: Headers}}\r\n */\r\nexport const getInit = () => ({\r\n  headers,\r\n  mode: 'cors'\r\n})\r\n\r\n/**\r\n * 生成url query字符串, 不带问号，需自行添加问号\r\n * @param {Object} args query参数列表，args为一个object\r\n * @returns {string}\r\n */\r\nexport const query = args => {\r\n  let result = ''\r\n  for (const key in args) if (args.hasOwnProperty(key)) {\r\n    const value = args[key]\r\n    if (result.length !== 0) result += '&'\r\n    result += key + '=' + value\r\n  }\r\n  return result\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} url\r\n * @param {Object} init 初始化对象\r\n * @returns {Promise<JSON>}\r\n */\r\nexport const request = async (url, init = {}) => (await fetch(url, init)).json()\r\n\r\n","import { postInit, request } from './req'\r\n\r\n/**\r\n *\r\n * @returns {Promise<JSON>}\r\n * @param path\r\n */\r\nexport const getFileList = path =>\r\n  request('/list', postInit({ action: 'list', path }))\r\n\r\n\r\n","export const GET_FILE_LIST = 'GET_FILE_LIST'\r\nexport const OPEN_FOLDER = 'OPEN_FOLDER'\r\nexport const BACK = 'BACK'","export function Path () {\r\n  this.node = []\r\n}\r\n\r\nPath.prototype = {\r\n  join: function (path) {\r\n    path = path.replace('/', '')\r\n    this.node.push(path)\r\n  },\r\n  back: function () {\r\n    this.node.pop()\r\n  },\r\n  toString: function () {\r\n    if (this.node.length === 1)\r\n      return '/' + this.node[0]\r\n    let str = ''\r\n    this.node.forEach(item => str += '/' + item)\r\n    return str\r\n  }\r\n}\r\n\r\nPath.fromString = function (str) {\r\n  let s = str.split('/')\r\n  let node = []\r\n  for (let sElement of s) {\r\n    node.push(sElement)\r\n  }\r\n\r\n  let path = new Path()\r\n  path.node = node\r\n  return path\r\n}\r\n\r\nPath.back = function (path) {\r\n  let index = path.lastIndexOf('/')\r\n  if (index === 0) return ''\r\n  path = path.substr(0, index)\r\n  return path\r\n}","import * as req from '../api/api'\r\nimport { BACK, GET_FILE_LIST, OPEN_FOLDER } from './action-types'\r\nimport { Path } from '../Path'\r\n\r\nconst ext = str => str.substr(str.lastIndexOf('.') + 1)\r\n\r\nexport const getFileList = ({ path, result }) => {\r\n  let fileTree = []\r\n  let files = []\r\n  let j = 0\r\n  for (let i = 0; i < result.length; i++) {\r\n    let { name, type } = result[i]\r\n    files[i] = {\r\n      title: name,\r\n      type: type === 'dir' ? type : ext(name)\r\n    }\r\n    if (type !== 'dir') continue\r\n    fileTree[j++] = {\r\n      title: name,\r\n      key: `${path}/${name}`,\r\n      children: [{ title: '' }]\r\n    }\r\n  }\r\n\r\n  return {\r\n    type: GET_FILE_LIST,\r\n    data: { path, fileTree, files }\r\n  }\r\n}\r\n\r\nexport const openFolder = folder =>\r\n  ({\r\n    type: OPEN_FOLDER,\r\n    data: folder\r\n  })\r\n\r\nexport const getFileListAsync = path =>\r\n  async dispatch => {\r\n    let { result } = await req.getFileList(path)\r\n    dispatch(getFileList({ path, result }))\r\n  }\r\n\r\nexport const backAsync = p =>\r\n  async dispatch => {\r\n    let path = Path.back(p)\r\n    let { result } = await req.getFileList(path)\r\n    dispatch(getFileList({ path, result }))\r\n  }\r\n\r\n","import React, { Component } from 'react'\r\nimport { Breadcrumb, Button, Input, Modal, Upload, message } from 'antd'\r\nimport './Navbar.css'\r\nimport { UploadOutlined } from '@ant-design/icons'\r\nimport { connect } from 'react-redux'\r\nimport { backAsync, getFileListAsync } from '../redux/actions'\r\nimport { Path } from '../Path'\r\n\r\nconst props = {\r\n  name: 'file',\r\n  action: '/fileUpload',\r\n  headers: {\r\n    authorization: 'authorization-text',\r\n  },\r\n  onChange (info) {\r\n    if (info.file.status !== 'uploading') {\r\n      console.log(info.file, info.fileList)\r\n    }\r\n    if (info.file.status === 'done') {\r\n      message.success(`${info.file.name} 上传成功`)\r\n    } else if (info.file.status === 'error') {\r\n      message.error(`${info.file.name} 上传失败.`)\r\n    }\r\n  },\r\n}\r\n\r\nclass Navbar extends Component {\r\n\r\n  state = {\r\n    showModal: false\r\n  }\r\n\r\n  handleBack = () => {\r\n    let path = this.props.path\r\n    this.props.backAsync(path)\r\n  }\r\n\r\n  handleUpload = () => {\r\n    this.setState({ showModal: true })\r\n  }\r\n\r\n  handleCancel = () => {\r\n    this.setState({ showModal: false })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"Navbar\">\r\n        <div className=\"left\">\r\n          <div>\r\n            <Button primary onClick={this.handleBack}>Back</Button>\r\n          </div>\r\n          {/*<Breadcrumb style={{color: 'white'}}>*/}\r\n          {/*  <Breadcrumb.Item key={'first-node'} style={{color: 'white'}}>/</Breadcrumb.Item>*/}\r\n          {/*  {*/}\r\n          {/*    this.props.path.node.map((item, index) => <Breadcrumb.Item key={index} style={{color: 'white'}}>{item}</Breadcrumb.Item>)*/}\r\n          {/*  }*/}\r\n          {/*</Breadcrumb>*/}\r\n          <div>\r\n            {this.props.path.length > 0 ? this.props.path : '/'}\r\n          </div>\r\n        </div>\r\n        <div className=\"right\">\r\n          <Button onClick={this.handleUpload}>上传文件</Button>\r\n        </div>\r\n        <Modal visible={this.state.showModal} onCancel={this.handleCancel} footer={null}>\r\n          <Upload {...props}>\r\n            <Button icon={<UploadOutlined/>}>点击上传</Button>\r\n          </Upload>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nNavbar = connect(\r\n  state => ({\r\n    path: state['Explorer'].path\r\n  }),\r\n  { backAsync, getFileListAsync }\r\n)(Navbar)\r\n\r\nexport { Navbar }","import React from 'react'\r\n\r\nexport const Body = props => (\r\n  <div className=\"Body\">\r\n    <div className=\"file-directory box\">{props.left}</div>\r\n    <div className=\"file-list box\">{props.right}</div>\r\n  </div>\r\n)","import React from 'react'\r\nimport { Tree } from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { getFileListAsync, openFolder } from '../redux/actions'\r\n\r\nfunction convert (data) {\r\n  let count = 0\r\n}\r\n\r\nclass FileDirectory extends React.Component {\r\n\r\n\r\n  componentDidMount () {\r\n    this.props.getFileListAsync(this.props.path)\r\n  }\r\n\r\n  handleSelect = e => {\r\n    let folder = e[0]\r\n    console.log(folder)\r\n    this.props.openFolder(folder)\r\n    this.props.getFileListAsync(folder)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"FileDirectory\">\r\n        <Tree treeData={this.props.fileTree} onSelect={this.handleSelect}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nFileDirectory.propTypes = {\r\n  fileTree: PropTypes.any\r\n}\r\n\r\nFileDirectory = connect(\r\n  state =>{\r\n    let { fileTree, path } = state['Explorer']\r\n    path = path.toString()\r\n    return {\r\n      fileTree,\r\n      path\r\n    }\r\n  },\r\n  { getFileListAsync, openFolder }\r\n)(FileDirectory)\r\n\r\nexport { FileDirectory }","export const apiUrl = 'http://localhost:8012/preview?url='","import React, { Component } from 'react'\r\nimport {\r\n  FileExcelOutlined,\r\n  FileGifOutlined,\r\n  FileImageOutlined, FileJpgOutlined, FileMarkdownOutlined,\r\n  FileOutlined, FilePdfOutlined,\r\n  FilePptOutlined, FileTextOutlined, FileUnknownOutlined, FileWordOutlined, FileZipOutlined,\r\n  FolderOpenOutlined\r\n} from '@ant-design/icons'\r\nimport PropTypes from 'prop-types'\r\nimport './File.css'\r\nimport { connect } from 'react-redux'\r\nimport { getFileListAsync, openFolder } from '../redux/actions'\r\nimport { apiUrl } from '../config'\r\n\r\nconst logoList = {\r\n  file: <FileOutlined/>,\r\n  dir: <FolderOpenOutlined/>,\r\n  gif: <FileGifOutlined/>,\r\n  jpg: <FileJpgOutlined/>,\r\n  png: <FileJpgOutlined/>,\r\n  jpeg: <FileJpgOutlined/>,\r\n  md: <FileMarkdownOutlined/>,\r\n  ppt: <FilePptOutlined/>,\r\n  pptx: <FilePptOutlined/>,\r\n  txt: <FileTextOutlined/>,\r\n  pdf: <FilePdfOutlined/>,\r\n  xls: <FileExcelOutlined/>,\r\n  xlsx: <FileExcelOutlined/>,\r\n  zip: <FileZipOutlined/>,\r\n  rar: <FileZipOutlined/>,\r\n  doc: <FileWordOutlined/>,\r\n  docx: <FileWordOutlined/>,\r\n  unknown: <FileUnknownOutlined/>\r\n}\r\n\r\nconst Logo = props => {\r\n  let { type } = props\r\n  if (logoList.hasOwnProperty(type))\r\n    return logoList[type]\r\n  else return logoList['file']\r\n}\r\n\r\nclass File extends Component {\r\n\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    type: PropTypes.string\r\n  }\r\n\r\n  handleClick = () => {\r\n    if (this.props.type === 'dir') {\r\n      let path = this.props.path + '/' + this.props.name\r\n      this.props.openFolder(path)\r\n      this.props.getFileListAsync(path)\r\n    } else {\r\n      let path = this.props.path + '/' + this.props.name\r\n      window.open(`${apiUrl}${path}`)\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"File\" onDoubleClick={this.handleClick}>\r\n        <div className=\"logo\">\r\n          {<Logo type={this.props.type}/>}\r\n        </div>\r\n        <p className=\"file-name\">\r\n          {this.props.name}\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nFile = connect(\r\n  state => {\r\n    return {\r\n      path: state['Explorer'].path,\r\n    }\r\n  },\r\n  { getFileListAsync, openFolder }\r\n)(File)\r\n\r\nexport { File }","import React, { Component } from 'react'\r\nimport { File } from './File'\r\nimport { connect } from 'react-redux'\r\nimport './FileList.css'\r\n\r\nclass FileList extends Component {\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"FileList\">\r\n        {\r\n          this.props.files.map((item, index) => <File key={index} name={item.title} type={item.type}/>)\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nFileList = connect(\r\n  state => ({\r\n    files: state['Explorer'].files\r\n  })\r\n)(FileList)\r\n\r\nexport { FileList }","import './App.css'\r\nimport { Navbar } from './components/Navbar'\r\nimport React from 'react'\r\nimport { Body } from './components/Body'\r\nimport { FileDirectory } from './components/FileDirectory'\r\nimport { FileList } from './components/FileList'\r\nimport { connect } from 'react-redux'\r\nimport { getFileListAsync } from './redux/actions'\r\n\r\nclass App extends React.Component {\r\n    render () {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar/>\r\n        <Body\r\n          left={<FileDirectory/>}\r\n          right={<FileList/>}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { BACK, GET_FILE_LIST, OPEN_FOLDER } from './action-types'\r\nimport { Path } from '../Path'\r\n\r\nconst init = {\r\n  fileTree: [],\r\n  files: [],\r\n  path: ''\r\n}\r\n\r\nexport function Explorer (state = init, action) {\r\n  switch (action.type) {\r\n    case GET_FILE_LIST:\r\n      let { fileTree, files, path } = action.data\r\n      return { ...state, fileTree, files, path }\r\n    case OPEN_FOLDER:\r\n      return { ...state, path: action.data }\r\n    case BACK:\r\n    {\r\n      let path = Path.back(state.path)\r\n      return { ...state, path }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}","import { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { Explorer } from './reducers'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst store = createStore(\r\n  combineReducers({\r\n    Explorer\r\n  }),\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'antd/dist/antd.css'\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}